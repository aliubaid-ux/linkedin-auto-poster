-- This script creates the missing 'learned_tones' and 'logs' tables
-- and sets up the necessary Row-Level Security policies.

-- Create the 'learned_tones' table
CREATE TABLE public.learned_tones (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  avg_length FLOAT,
  preferred_hooks TEXT[],
  sentence_complexity FLOAT,
  emoji_usage FLOAT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS and add policies for 'learned_tones'
ALTER TABLE public.learned_tones ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own learned tones." ON public.learned_tones
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own learned tones." ON public.learned_tones
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own learned tones." ON public.learned_tones
  FOR UPDATE USING (auth.uid() = user_id);

-- Create the 'logs' table
CREATE TABLE public.logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  timestamp TIMESTAMPTZ DEFAULT NOW(),
  run_id TEXT,
  status TEXT,
  generated_count INT,
  posted_count INT,
  errors TEXT[]
);

-- Enable RLS and add policies for 'logs'
ALTER TABLE public.logs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own logs." ON public.logs
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own logs." ON public.logs
  FOR INSERT WITH CHECK (auth.uid() = user_id);
