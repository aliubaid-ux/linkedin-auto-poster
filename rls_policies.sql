-- This script creates the missing 'learned_tones' and 'logs' tables
-- and sets up the necessary Row-Level Security policies.

-- Drop all existing tables to start fresh
DROP TABLE IF EXISTS public.logs;
DROP TABLE IF EXISTS public.learned_tones;
DROP TABLE IF EXISTS public.drafts;
DROP TABLE IF EXISTS public.profiles;

-- Create the 'profiles' table with RLS
CREATE TABLE public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT,
  niches TEXT[],
  tone TEXT,
  posting_mode TEXT,
  preferred_time_utc TEXT,
  linkedin_connected BOOLEAN
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own profiles." ON public.profiles
  FOR ALL USING (auth.uid() = id);

-- Create the 'drafts' table with RLS
CREATE TABLE public.drafts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  source TEXT,
  topic TEXT,
  raw_generation TEXT,
  optimized_text TEXT,
  optimized_meta JSONB,
  status TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  posted_at TIMESTAMPTZ,
  linkedin_post_id TEXT
);
ALTER TABLE public.drafts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own drafts." ON public.drafts
  FOR ALL USING (auth.uid() = user_id);

-- Create the 'learned_tones' table with RLS
CREATE TABLE public.learned_tones (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
  avg_length FLOAT,
  preferred_hooks TEXT[],
  sentence_complexity FLOAT,
  emoji_usage FLOAT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.learned_tones ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own learned tones." ON public.learned_tones
  FOR ALL USING (auth.uid() = user_id);

-- Create the 'logs' table with RLS
CREATE TABLE public.logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  "timestamp" TIMESTAMPTZ DEFAULT NOW(),
  run_id TEXT,
  status TEXT,
  generated_count INT,
  posted_count INT,
  errors TEXT[]
);
ALTER TABLE public.logs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own logs." ON public.logs
  FOR ALL USING (auth.uid() = user_id);

-- Function to force PostgREST schema cache reload
CREATE OR REPLACE FUNCTION force_schema_reload()
RETURNS void AS $$
BEGIN
  NOTIFY pgrst, 'reload schema';
END;
$$ LANGUAGE plpgsql;
